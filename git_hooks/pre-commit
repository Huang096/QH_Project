#!/bin/bash



# docker_exec:	Helper function
docker_exec () {
	local container="$1"
	shift	# We don't need $1 any longer.

	docker compose \
		-f docker-compose.yml \
		-f docker-compose-local.yml \
                --env-file env-local.env \
		exec "$container" \
		"$@"
}

# run_lint:     Runs prettier and eslint on all staged files inside
#               Docker. The files will be reformatted by prettier and the
#               script will fail if there are any errors from eslint.

# Arguments:
#	$1:	Container name
# 	$2 ...:	List of pathnames
#
# The pathnames will have their first pathname component stripped off to
# generate the corresponding pathnames in the container.

run_lint () {
	local container="$1"
	shift	# We don't need $1 any longer.

	# "$@" is now the list of relative pathnames.

        # "${@#*/}" is the list of pathnames with the first
        # pathname component stripped off ("api/file" --> "file",
        # "frontend/some/path" --> "some/path")

	# Prettify all selected files in the container.
	docker_exec "$container" ./node_modules/.bin/prettier \
		--ignore-unknown \
		--write \
		"${@#*/}"

        # Lint selected files in the container, and bail out if there
        # are errors. Warnings are reported, but won't stop the commit
	if ! docker_exec "$container" yarn run eslint "${@#*/}"
	then
		return 1
	fi

	# Add prettified files.
	git add "$@"
}

for dir in api/src api/test frontend/src; do

	# List changed staged files and add them to an array.
	readarray -d '' -t list < <(
		git diff -z --staged --name-only --diff-filter=ACMR -- "$dir"
	)

	# Skip directory if no changed files.
	[ "${#list[@]}" -eq 0 ] && continue

	# Lint files.
        # The container name is taken from the first pathname component
        # of the first entry in the list.
	if ! run_lint "${list[0]%%/*}" "${list[@]}"; then
		printf 'Aborted. Some files in "%s" failed linting\n.' "$dir" >&2
		exit 1
	fi

	printf 'All files in "%s" ok\n' "$dir"

done

echo 'Done.'
